<?xml version="1.0" encoding="UTF-8"?>

<AttributeResolver xmlns="urn:mace:shibboleth:2.0:resolver"
    xmlns:sec="urn:mace:shibboleth:2.0:security"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="urn:mace:shibboleth:2.0:resolver http://shibboleth.net/schema/idp/shibboleth-attribute-resolver.xsd
                      urn:mace:shibboleth:2.0:security http://shibboleth.net/schema/idp/shibboleth-security.xsd">

    <DataConnector propagateResolutionExceptions="false" acceptTypes="application/json" id="rest" xsi:type="HTTP" httpClientRef="WebServiceHttpClient">
        <URLTemplate>
            <![CDATA[
                http://rest:4000/attributes/$pathEscaper.escape($resolutionContext.principal)
            ]]>
        </URLTemplate>

        <ResponseMapping>
            <Script>
                <![CDATA[
        // Java 클래스 임포트
        var HashSet = Java.type("java.util.HashSet");
        var ArrayList = Java.type("java.util.ArrayList");
        var HttpClientSupport = Java.type("net.shibboleth.shared.httpclient.HttpClientSupport");
        var logger = Java.type("org.slf4j.LoggerFactory").getLogger("net.shibboleth.idp.attribute");
        var IdPAttribute = Java.type("net.shibboleth.idp.attribute.IdPAttribute");
        var StringAttributeValue = Java.type("net.shibboleth.idp.attribute.StringAttributeValue");
        var EmptyAttributeValue = Java.type("net.shibboleth.idp.attribute.EmptyAttributeValue");
        
        // HTTP 응답 본문 읽기
        logger.info("=== Shibboleth Attribute Resolver ===");
        var body = HttpClientSupport.toString(response.getEntity(), "UTF-8", 65536);
        logger.info("Response body: " + body);
        
        try {
        // JSON 파싱
        var resultObj = JSON.parse(body);
        
        // 모든 속성 처리
        var keys = Object.keys(resultObj);
        for (var i = 0; i < keys.length; i++) {
            var attName = keys[i];
            logger.info("Processing attribute: " + attName);
            
            // 특별히 eduPersonAffiliation에 대한 로깅과 처리 추가
            if (attName === "eduPersonAffiliation") {
                var val = resultObj[attName];
                logger.info("eduPersonAffiliation 값 타입: " + (typeof val) + ", 값: " + JSON.stringify(val));
                logger.info("eduPersonAffiliation array? " + Array.isArray(val));
                
                // 특별 처리: REST API에서 온 eduPersonAffiliation이 객체일 경우 "STUDENT"로 하드코딩
                if (Array.isArray(val) && val.length > 0 && typeof val[0] === 'object' && Object.keys(val[0]).length === 0) {
                    logger.info("eduPersonAffiliation에 빈 객체 감지, 'STUDENT'로 값 설정");
                    // 원래 값을 변경
                    resultObj[attName] = ["STUDENT"];
                    val = resultObj[attName];
                    logger.info("eduPersonAffiliation 값 수정됨: " + JSON.stringify(val));
                } else if (Array.isArray(val) && val.length > 0) {
                    logger.info("eduPersonAffiliation[0] 타입: " + (typeof val[0]) + ", 값: " + JSON.stringify(val[0]));
                }
            }                // IdPAttribute 생성
                var idpAttribute = new IdPAttribute(attName);
                
                // StringAttributeValue 객체 컬렉션 생성
                var attributeValues = new ArrayList();
                
                // 속성 값 가져오기
                var valuesArray = resultObj[attName];
                
                // 배열인 경우 모든 요소 처리
                if (Object.prototype.toString.call(valuesArray) === '[object Array]') {
                    logger.info(attName + " is an array with " + valuesArray.length + " items");
                    
                    for (var j = 0; j < valuesArray.length; j++) {
                        var value = valuesArray[j];
                        if (value !== null && value !== undefined && value !== "") {
                            // 객체인 경우 JSON.stringify를 사용하지 않고 바로 문자열 변환
                            if (typeof value === 'object') {
                                logger.info("Object value detected for " + attName + ", using string value directly");
                                attributeValues.add(new StringAttributeValue(value.toString()));
                            } else {
                                logger.info("Adding value: " + value);
                                attributeValues.add(new StringAttributeValue(String(value)));
                            }
                        }
                    }
                } else {
                    // 단일 값인 경우
                    logger.info(attName + " is a single value");
                    if (valuesArray !== null && valuesArray !== undefined && valuesArray !== "") {
                        // 객체인 경우 JSON.stringify를 사용하지 않고 바로 문자열 변환
                        if (typeof valuesArray === 'object') {
                            logger.info("Object value detected for " + attName + ", using string value directly");
                            attributeValues.add(new StringAttributeValue(valuesArray.toString()));
                        } else {
                            logger.info("Adding value: " + valuesArray);
                            attributeValues.add(new StringAttributeValue(String(valuesArray)));
                        }
                    }
                }
                
                // 값이 없으면 NULL_VALUE 추가
                if (attributeValues.isEmpty()) {
                    logger.info("No values found for " + attName + ", adding NULL_VALUE");
                    attributeValues.add(new EmptyAttributeValue(EmptyAttributeValue.EmptyType.NULL_VALUE));
                }
                
                // 값 설정 및 결과에 추가
                idpAttribute.setValues(attributeValues);
                connectorResults.add(idpAttribute);
                logger.info("Added attribute: " + attName + " with " + attributeValues.size() + " values");
            }
            
        } catch (e) {
            logger.error("Error processing attributes: " + e);
            logger.error("Stack trace: " + e.stack);
            throw e;
        }
        ]]>
            </Script>
        </ResponseMapping>

        <!-- <ResultCache expireAfterWrite="PT5M"/> -->
    </DataConnector>

    <AttributeDefinition xsi:type="Simple" id="displayName">
	<InputDataConnector ref="rest"  attributeNames="displayName"/> 
        <DisplayName xml:lang="ko">표시이름</DisplayName>
        <DisplayDescription xml:lang="ko">표시이름</DisplayDescription>
        <AttributeEncoder xsi:type="SAML1String" name="urn:mace:dir:attribute-def:displayName" encodeType="false" />
        <AttributeEncoder xsi:type="SAML2String" name="urn:oid:2.16.840.1.113730.3.1.241" friendlyName="displayName" encodeType="false" />
    </AttributeDefinition>

    <!-- login id -->
    <AttributeDefinition xsi:type="Simple" id="uid">
	<InputDataConnector ref="rest"  attributeNames="uid"/> 
        <DisplayName xml:lang="ko">사용자 ID</DisplayName>
        <DisplayDescription xml:lang="ko">학교 로그인 사용자 ID</DisplayDescription>
        <AttributeEncoder xsi:type="SAML1String" name="urn:mace:dir:attribute-def:uid" encodeType="false" />
        <AttributeEncoder xsi:type="SAML2String" name="urn:oid:0.9.2342.19200300.100.1.1" friendlyName="uid" encodeType="false" />
    </AttributeDefinition>

    <AttributeDefinition xsi:type="Simple" id="eduPersonPrincipalName">
        <InputDataConnector ref="rest"  attributeNames="eduPersonPrincipalName"/>
        <DisplayName xml:lang="ko">학번(사번)</DisplayName>
        <DisplayDescription xml:lang="ko">교육기관 주체 식별자</DisplayDescription>
        <AttributeEncoder xsi:type="SAML1String" name="urn:mace:dir:attribute-def:eduPersonPrincipalName" encodeType="false" />
        <AttributeEncoder xsi:type="SAML2String" name="urn:oid:1.3.6.1.4.1.5923.1.1.1.6" friendlyName="eduPersonPrincipalName" encodeType="false" />
    </AttributeDefinition>

    <AttributeDefinition xsi:type="Simple" id="eduPersonAffiliation">
        <InputDataConnector ref="rest"  attributeNames="eduPersonAffiliation"/>
        <DisplayName xml:lang="ko">신분구분</DisplayName>
        <DisplayDescription xml:lang="ko">교육기관 내 소속 유형</DisplayDescription>
        <AttributeEncoder xsi:type="SAML1String" name="urn:mace:dir:attribute-def:eduPersonAffiliation" encodeType="false" />
        <AttributeEncoder xsi:type="SAML2String" name="urn:oid:1.3.6.1.4.1.5923.1.1.1.1" friendlyName="eduPersonAffiliation" encodeType="false" />
    </AttributeDefinition>

    <AttributeDefinition xsi:type="Simple" id="mail" >
	<InputDataConnector ref="rest"  attributeNames="mail"/> 
        <DisplayName xml:lang="ko">이메일</DisplayName>
        <DisplayDescription xml:lang="ko">사용자 이메일 주소</DisplayDescription>
        <AttributeEncoder xsi:type="SAML1String" name="urn:mace:dir:attribute-def:mail" encodeType="false" />
        <AttributeEncoder xsi:type="SAML2String" name="urn:oid:0.9.2342.19200300.100.1.3" friendlyName="mail" encodeType="false" />
    </AttributeDefinition>

    <!-- employeeNumber -->
    <AttributeDefinition id="employeeNumber" xsi:type="Simple">
	<InputDataConnector ref="rest"  attributeNames="employeeNumber"/> 
        <DisplayName xml:lang="ko">직원번호</DisplayName>
        <DisplayDescription xml:lang="ko">사용자 직원번호</DisplayDescription>
        <AttributeEncoder xsi:type="SAML1String" name="urn:mace:dir:attribute-def:employeeNumber" encodeType="false" />
        <AttributeEncoder xsi:type="SAML2String" name="urn:oid:2.16.840.1.113730.3.1.3" friendlyName="employeeNumber" encodeType="false" />
    </AttributeDefinition>

    <!-- 대학명 static -->
    <AttributeDefinition id="organizationName" xsi:type="Simple">
	<InputDataConnector ref="rest"  attributeNames="organizationName"/> 
        <DisplayName xml:lang="ko">대학명</DisplayName>
        <DisplayDescription xml:lang="ko">소속 기관 이름</DisplayDescription>
        <AttributeEncoder xsi:type="SAML1String" name="urn:mace:dir:attribute-def:o" encodeType="false" />
        <AttributeEncoder xsi:type="SAML2String" name="urn:oid:2.5.4.10" friendlyName="o" encodeType="false" />
    </AttributeDefinition>

    <!-- 학부 -->
  <AttributeDefinition xsi:type="Simple" id="organizationalUnitName" >
	<InputDataConnector ref="rest" attributeNames="organizationalUnitName"/> 
        <DisplayName xml:lang="ko">학부(소속)</DisplayName>
        <DisplayDescription xml:lang="ko">소속 학부 또는 부서명</DisplayDescription>
	<AttributeEncoder xsi:type="SAML1String" name="urn:mace:dir:attribute-def:organizationalUnitName" encodeType="false" />
        <AttributeEncoder xsi:type="SAML2String" name="urn:oid:2.5.4.11" friendlyName="OU" encodeType="false" />
  </AttributeDefinition>

    <!-- eduPersonEntitlement -->
    <AttributeDefinition xsi:type="Simple" id="eduPersonEntitlement">
        <InputDataConnector ref="rest" attributeNames="eduPersonEntitlement"/>
        <DisplayName xml:lang="ko">상태정보</DisplayName>
        <DisplayDescription xml:lang="ko">사용자의 상태 및 자격</DisplayDescription>
        <AttributeEncoder xsi:type="SAML1String" name="urn:mace:dir:attribute-def:eduPersonEntitlement" encodeType="false" />
        <AttributeEncoder xsi:type="SAML2String" name="urn:oid:1.3.6.1.4.1.5923.1.1.1.7" friendlyName="eduPersonEntitlement" encodeType="false" />
    </AttributeDefinition>

    <!-- departmentNumber -->
    <AttributeDefinition xsi:type="Simple" id="departmentNumber">
        <InputDataConnector ref="rest" attributeNames="departmentNumber"/>
        <DisplayName xml:lang="ko">학과</DisplayName>
        <DisplayDescription xml:lang="ko">소속 학과</DisplayDescription>
        <AttributeEncoder xsi:type="SAML1String" name="urn:mace:dir:attribute-def:departmentNumber" encodeType="false" />
        <AttributeEncoder xsi:type="SAML2String" name="urn:oid:2.16.840.1.113730.3.1.2" friendlyName="departmentNumber" encodeType="false" />
    </AttributeDefinition> 
    <!-- 학년 
<AttributeDefinition xsi:type="Simple" id="grade" >
	<InputDataConnector ref="rest" attributeNames="grade" /> 
    <AttributeEncoder xsi:type="SAML1String" name="urn:mace:dir:attribute-def:grade" encodeType="false" />
    <AttributeEncoder xsi:type="SAML2String" nameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified" name="grade" friendlyName="grade"/>
  </AttributeDefinition>
-->
</AttributeResolver>